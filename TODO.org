* Maybe switch to C99 (to allow inline). (or maybe not!)
* Allow the user to define its own Panic() function
* Be compatible with C++ user tasks
* TODO Add a license and define a file header to add to each file for distribution
* TODO Insert a raw string in the final binary to keep track of the kernel and version
** Something like "Lazuli 1.42.63 ", with delimiters, or fixed size.
*** Maybe make it 'richer' by adding information about the compiler name and version used to compile.
** This information (kernel name, version number(s)) might be accessible to the code.
** Pick a version numbering model.
* Get a real Makefile, or build system, or whatever
* TODO Reference resources
** Providing links and documentation over the Internet.
* Add a README file
** [[https://youtu.be/PC05prd2usY]]
* Write documentation about header files organization
* For context saving: Allow the user to define a task with no context saving
* TODO Write doc about progmem
* Add a CONTRIBUTING file and update README.md about that
** [[https://help.github.com/articles/setting-guidelines-for-repository-contributors/]]
* Provide a way to perform unit tests onto the target machine
* Prefix Lazuli structs in userspace with "Lz_"
* Find a logo
* TODO Document build chain
* Change function prototypes and declarations to explicitly take void as parameter instead of ().
** And add this rule to the "C style and conventions file".
* Add an "end of file" comment marker at the end of each file.
** Cf. Barr conventions.
* For example programs: write the purpose of each program.
* Manage idle task in RR scheduler.
* Replace Arch_DisableInterrupts() with Arch_DisableInterruptsGetStatus() where possible.
* When using CONFIG_CHECK_XXXXX, unify the calls to Panic() or return.
** Decide which one is the best.
* Rename some functions for API consistency:
** Lz_Run() => Lz_System_Run()
** Lz_RegisterTask() => Lz_System_RegisterTask() (or Lz_Task_Register)
** Lz_SetSchedulerClass() => Lz_Scheduler_SetClass()
* Maybe think about moving config.h file out of sys/ directory.
* Add non blocking mutex lock
** Something like bool Lz_Mutex_TryLock(Lz_Mutex * const mutex);
* Implement pipes
** Lz_Pipe, Lz_Pipe_Read(), Lz_Pipe_Write(), Lz_Pipe_TryRead()
* Move linked lists functions declarations in a kernel header file.
** The user list.h header file will only contain the definition of structs.
* Find a way to get rid of #including AVR interrupts header file in kernel code.
* If threads are killed/crash while holding locks, what happens?
