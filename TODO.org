* Maybe switch to C99 (to allow inline). (or maybe not!)
* Allow the user to define its own Panic() function
* Be compatible with C++ user tasks
* TODO Add a license and define a file header to add to each file for public distribution
** Like that :
   #+BEGIN_SRC C
   /*
    * This file is part of the Lazuli project.
    *
    * This file is in the public domain, as well as all files of this project.
    *
    * Authors:
    *      Remi Andruccioli (2017)
    *
    */
   #+END_SRC
* TODO Insert a raw string in the final binary to keep track of the kernel and version
** Something like "Lazuli 1.42.63 ", with delimiters, or fixed size.
*** Maybe make it 'richer' by adding information about the compiler name and version used to compile.
** This information (kernel name, version number(s)) might be accessible to the code.
** Pick a version numbering model.
* Get a real Makefile, or build system, or whatever
* TODO Reference resources
** Providing links and documentation over the Internet.
* Add a README file
** [[https://youtu.be/PC05prd2usY]]
* Write documentation about header files organization
* For context saving: Allow the user to define a task with no context saving
* TODO Write doc about progmem
* Add a CONTRIBUTING file and update README.md about that
** [[https://help.github.com/articles/setting-guidelines-for-repository-contributors/]]
* Provide a way to perform unit tests onto the target machine
* Prefix Lazuli structs in userspace with "Lz_"
* Find a logo
* TODO Document build chain
* Create a section to declare uninitialized global variables
** Every global variable that is not explicitly declared to a value will be
   placed in the BSS section and initialized to 0 on startup.
   But most of the time, we don't need this 0 initialization.
   Moreover initializing the BSS section on startup has a cost.
   So it would be nice if we could declare global variables to not be placed in
   the BSS section. That way we can keep the true needed BSS initialization very
   small, and all the concerned variables can be written for the first time on
   runtime.
* Change function prototypes and declarations to explicitly take void as parameter instead of ().
** And add this rule to the "C style and conventions file".
* Add an "end of file" comment marker at the end of each file.
** Cf. Barr conventions.
* Manage task termination.
** And try again the first example program for mutexes.
* For example programs: write the purpose of each program.
* Manage idle task in RR scheduler.
* Replace Arch_DisableInterrupts() with Arch_DisableInterruptsGetStatus() where possible.
* Rename config macro constants.
** To adopt the following : LZ_CONFIG_<MODULE>_<PARAMETER>
   e.g. CONFIG_CHECK_NULL_PARAMETERS_IN_SERIAL will become LZ_CONFIG_SERIAL_CHECK_NULL_PARAMETERS
* When using CONFIG_CHECK_XXXXX, unify the calls to Panic() or return.
** Decide which one is the best.
