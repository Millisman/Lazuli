.TH "src/kern/modules/clock_24/clock_24.c" 3 "Sun Sep 6 2020" "Lazuli" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/kern/modules/clock_24/clock_24.c \- 24-Hour clock kernel implementation\&.  

.SH SYNOPSIS
.br
.PP
\fC#include <stdint\&.h>\fP
.br
\fC#include <Lazuli/clock_24\&.h>\fP
.br
\fC#include <Lazuli/common\&.h>\fP
.br
\fC#include <Lazuli/config\&.h>\fP
.br
\fC#include <Lazuli/sys/clock_24\&.h>\fP
.br
\fC#include <Lazuli/sys/memory\&.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "static \fBbool\fP \fBIncrementUntil\fP (volatile \fBuint8_t\fP *const value, const \fBuint8_t\fP comparator)"
.br
.RI "Increment an uint8_t value, and reset it if it reaches the value in \fCcomparator\fP\&. "
.ti -1c
.RI "static \fBbool\fP \fBIncrementSeconds\fP (void)"
.br
.RI "Increment the seconds of the system 24-Hour clock\&. "
.ti -1c
.RI "static \fBbool\fP \fBIncrementMinutes\fP (void)"
.br
.RI "Increment the minutes of the system 24-Hour clock\&. "
.ti -1c
.RI "static void \fBIncrementHours\fP (void)"
.br
.RI "Increment the hours of the system 24-Hour clock\&. "
.ti -1c
.RI "void \fBClock24_Increment\fP (void)"
.br
.RI "Increment the 24-Hour clock, taking into the account the resolution of the system clock\&. "
.ti -1c
.RI "void \fBLz_Clock24_Get\fP (\fBClock24\fP *const userClock24)"
.br
.RI "Get the time on a 24-Hour clock\&. "
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "static volatile \fBClock24\fP \fBclock24\fP = {0}"
.br
.RI "The system \fBClock24\fP\&. "
.ti -1c
.RI "static volatile \fBu_read_write_atomic_t\fP \fBclockVersion\fP = 0"
.br
.RI "The clock version value\&. "
.in -1c
.SH "Detailed Description"
.PP 
24-Hour clock kernel implementation\&. 


.PP
\fBCopyright:\fP
.RS 4
2019-2020, Remi Andruccioli remi.andruccioli@gmail.com
.RE
.PP
This file describes the implementation of the kernel 24-Hour clock\&. 
.PP
Definition in file \fBclock_24\&.c\fP\&.
.SH "Function Documentation"
.PP 
.SS "static \fBbool\fP IncrementUntil (volatile \fBuint8_t\fP *const value, const \fBuint8_t\fP comparator)\fC [static]\fP"

.PP
Increment an uint8_t value, and reset it if it reaches the value in \fCcomparator\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvalue\fP A valid pointer to the value to increment\&. 
.br
\fIcomparator\fP The value used for comparison\&.
.RE
.PP
\fBReturns:\fP
.RS 4
\fItrue\fP if:
.IP "\(bu" 2
The value was reset \fIfalse\fP if:
.IP "\(bu" 2
The value was incremented without resetting 
.PP
.RE
.PP

.PP
Definition at line 46 of file clock_24\&.c\&.
.SS "static \fBbool\fP IncrementSeconds (void)\fC [static]\fP"

.PP
Increment the seconds of the system 24-Hour clock\&. 
.PP
\fBReturns:\fP
.RS 4
\fItrue\fP if the minutes need to be incremented, else \fIfalse\fP\&. 
.RE
.PP

.PP
Definition at line 65 of file clock_24\&.c\&.
.SS "static \fBbool\fP IncrementMinutes (void)\fC [static]\fP"

.PP
Increment the minutes of the system 24-Hour clock\&. 
.PP
\fBReturns:\fP
.RS 4
\fItrue\fP if the hours need to be incremented, else \fIfalse\fP\&. 
.RE
.PP

.PP
Definition at line 78 of file clock_24\&.c\&.
.SS "void Lz_Clock24_Get (\fBClock24\fP *const userClock24)"

.PP
Get the time on a 24-Hour clock\&. 
.PP
\fBParameters:\fP
.RS 4
\fIuserClock24\fP A pointer to an allocated \fBClock24\fP\&.
.RE
.PP
\fBWarning:\fP
.RS 4
This function may spin if the kernel updates the time while this functions reads it\&. 
.RE
.PP

.PP
Definition at line 146 of file clock_24\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Lazuli from the source code\&.
