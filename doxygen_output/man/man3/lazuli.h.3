.TH "src/include/Lazuli/lazuli.h" 3 "Sun Sep 6 2020" "Lazuli" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/include/Lazuli/lazuli.h \- The public API of the Lazuli kernel\&.  

.SH SYNOPSIS
.br
.PP
\fC#include <stdint\&.h>\fP
.br
\fC#include <Lazuli/common\&.h>\fP
.br
\fC#include <Lazuli/config\&.h>\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBLz_TaskConfiguration\fP"
.br
.RI "Represents the configuration of a task\&. "
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef \fBint8_t\fP \fBlz_task_priority_t\fP"
.br
.RI "Represents the priority of a task, as a signed integer\&. "
.ti -1c
.RI "typedef \fBuint16_t\fP \fBlz_u_resolution_unit_t\fP"
.br
.RI "Represents the type used for the system clock resolution unit, as an unsigned integer\&. "
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBLz_SchedulingPolicy\fP { \fBCYCLIC_RT\fP = 0, \fBPRIORITY_RT\fP }
.RI "Defines the possible scheduling policies for a Lazuli user task\&. ""
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBbool\fP \fBLz_RegisterTask\fP (void(*const taskEntryPoint)(void), \fBLz_TaskConfiguration\fP *taskConfiguration)"
.br
.RI "Register a new task\&. "
.ti -1c
.RI "void \fBLz_TaskConfiguration_Init\fP (\fBLz_TaskConfiguration\fP *const taskConfiguration)"
.br
.RI "Initialize an \fBLz_TaskConfiguration\fP with default values for all parameters\&. "
.ti -1c
.RI "void \fBLz_Run\fP (void)"
.br
.RI "Run the scheduler\&. "
.ti -1c
.RI "void \fBLz_Task_WaitInterrupt\fP (\fBuint8_t\fP interruptCode)"
.br
.RI "Wait for a specific interrupt to occur\&. "
.ti -1c
.RI "char const  * \fBLz_Task_GetName\fP (void)"
.br
.RI "Get the name of the calling task\&. "
.ti -1c
.RI "void \fBLz_Task_Terminate\fP (void)"
.br
.RI "Terminate the calling task\&. "
.ti -1c
.RI "void \fBLz_Task_WaitActivation\fP (void)"
.br
.RI "Set the calling task to wait for its next activation\&. "
.ti -1c
.RI "void \fBLz_WaitTimer\fP (\fBlz_u_resolution_unit_t\fP units)"
.br
.RI "Set the calling task to wait for the specified number of time resolution units (time slices), using the software timer\&. "
.in -1c
.SH "Detailed Description"
.PP 
The public API of the Lazuli kernel\&. 


.PP
\fBCopyright:\fP
.RS 4
2017-2020, Remi Andruccioli remi.andruccioli@gmail.com
.RE
.PP
This file describes the public (user) API of the Lazuli kernel\&. It defines public types and functions that can by used by user main code and tasks\&. 
.PP
Definition in file \fBlazuli\&.h\fP\&.
.SH "Typedef Documentation"
.PP 
.SS "typedef \fBint8_t\fP \fBlz_task_priority_t\fP"

.PP
Represents the priority of a task, as a signed integer\&. The higher the value, the higher the priority\&. 
.PP
Definition at line 30 of file lazuli\&.h\&.
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBLz_SchedulingPolicy\fP"

.PP
Defines the possible scheduling policies for a Lazuli user task\&. 
.PP
\fBAttention:\fP
.RS 4
The constants are defined from the highest priority policy to the lowest\&. i\&.e\&. A lower value means a higher priority\&. 
.RE
.PP

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fICYCLIC_RT \fP\fP
Cyclic real-time scheduling\&. 
.TP
\fB\fIPRIORITY_RT \fP\fP
Priority time sliced real-time scheduling\&. Equivalent to POSIX SCHED_RR\&. 
.PP
Definition at line 44 of file lazuli\&.h\&.
.SH "Function Documentation"
.PP 
.SS "\fBbool\fP Lz_RegisterTask (void(*)(void) taskEntryPoint, \fBLz_TaskConfiguration\fP * taskConfiguration)"

.PP
Register a new task\&. If an error occured during registration of the task \fIfalse\fP is returned and the task is not included in the set of tasks that will be run\&.
.PP
\fBParameters:\fP
.RS 4
\fItaskEntryPoint\fP The entry point of the task to register\&. i\&.e\&. A pointer to the function representing the task\&. 
.br
\fItaskConfiguration\fP A pointer to an \fBLz_TaskConfiguration\fP containing the configuration of the task being registered\&. If NULL is passed, then default values are applied for all parameters\&.
.RE
.PP
\fBReturns:\fP
.RS 4
.IP "\(bu" 2
\fItrue\fP if the task has been registered without error\&.
.IP "\(bu" 2
\fIfalse\fP if an error occured during registration\&. 
.PP
.RE
.PP

.PP
Definition at line 758 of file scheduler\&.c\&.
.SS "void Lz_TaskConfiguration_Init (\fBLz_TaskConfiguration\fP *const taskConfiguration)"

.PP
Initialize an \fBLz_TaskConfiguration\fP with default values for all parameters\&. No function is provided for allocating a new \fBLz_TaskConfiguration\fP\&. So it is strongly advised to allocate the \fBLz_TaskConfiguration\fP parameter on the stack before calling this function\&.
.PP
\fBParameters:\fP
.RS 4
\fItaskConfiguration\fP A pointer to the \fBLz_TaskConfiguration\fP to initialize\&. 
.RE
.PP

.PP
Definition at line 746 of file scheduler\&.c\&.
.SS "void Lz_Run (void)"

.PP
Run the scheduler\&. Start scheduling tasks\&. 
.PP
Definition at line 765 of file scheduler\&.c\&.
.SS "void Lz_Task_WaitInterrupt (\fBuint8_t\fP interruptCode)"

.PP
Wait for a specific interrupt to occur\&. Puts the calling task to sleep until the specified interrupt occurs\&.
.PP
\fBParameters:\fP
.RS 4
\fIinterruptCode\fP The code of the interrupt to wait for\&.
.RE
.PP
\fBAttention:\fP
.RS 4
Only tasks with scheduling policy PRIORITY_RT can wait for interrupts\&. 
.RE
.PP

.PP
Definition at line 793 of file scheduler\&.c\&.
.SS "char const* Lz_Task_GetName (void)"

.PP
Get the name of the calling task\&. 
.PP
\fBReturns:\fP
.RS 4
A pointer to a string containing the name of the current running task, or NULL if the task has no name\&. 
.RE
.PP

.PP
Definition at line 779 of file scheduler\&.c\&.
.SS "void Lz_Task_Terminate (void)"

.PP
Terminate the calling task\&. The context of the task will be saved on its stack\&.
.PP
Calling this function has the same effect than returning from the task's main function\&.
.PP
The terminated task will never be scheduled again\&. 
.PP
Definition at line 815 of file scheduler\&.c\&.
.SS "void Lz_Task_WaitActivation (void)"

.PP
Set the calling task to wait for its next activation\&. May be used if the task finnished its work without consuming all of its completion time\&.
.PP
\fBAttention:\fP
.RS 4
Only tasks with scheduling policy CYCLIC_RT can wait for next activation\&. 
.RE
.PP

.PP
Definition at line 785 of file scheduler\&.c\&.
.SS "void Lz_WaitTimer (\fBlz_u_resolution_unit_t\fP units)"

.PP
Set the calling task to wait for the specified number of time resolution units (time slices), using the software timer\&. As Lazuli is a time sliced operating system, the effective waiting will start at the end of the current time slice\&. This means that the real waiting time \fIstarting from the calling of this function\fP will be:
.PP
units / clock resolution frequency <= waiting time \fBAND\fP waiting time < (units + 1) / clock resolution frequency
.PP
See the configuration option LZ_CONFIG_SYSTEM_CLOCK_RESOLUTION_FREQUENCY\&.
.PP
\fBParameters:\fP
.RS 4
\fIunits\fP The number of time slices to wait\&.
.RE
.PP
\fBWarning:\fP
.RS 4
Only works for tasks with PRIORITY_RT policy\&. 
.RE
.PP

.PP
Definition at line 804 of file scheduler\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Lazuli from the source code\&.
