.TH "src/include/Lazuli/sys/task.h" 3 "Sun Sep 6 2020" "Lazuli" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/include/Lazuli/sys/task.h \- Base task definition and context description\&.  

.SH SYNOPSIS
.br
.PP
\fC#include <stdint\&.h>\fP
.br
\fC#include <Lazuli/common\&.h>\fP
.br
\fC#include <Lazuli/lazuli\&.h>\fP
.br
\fC#include <Lazuli/list\&.h>\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBTask\fP"
.br
.RI "Represents a task\&. "
.ti -1c
.RI "struct \fBTaskContextLayout\fP"
.br
.RI "Represents the layout of the stack when saving the context of a task\&. "
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef void(* \fBFuncVoidVoid\fP) (void)"
.br
.RI "This type definition is needed to exlude confusion with the 'volatile' type qualifier used in the struct declaration below\&. "
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBTaskToSchedulerMessage\fP { \fBNO_MESSAGE\fP = 0, \fBWAIT_ACTIVATION\fP, \fBWAIT_INTERRUPT\fP, \fBTERMINATE_TASK\fP, \fBWAIT_MUTEX\fP, \fBWAIT_SOFTWARE_TIMER\fP }
.RI "Represents a message that a \fBTask\fP can pass to the scheduler after its time slice has expired\&. ""
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBTask_Abort\fP (void)"
.br
.RI "Abort the calling task\&. "
.in -1c
.SH "Detailed Description"
.PP 
Base task definition and context description\&. 


.PP
\fBCopyright:\fP
.RS 4
2017-2020, Remi Andruccioli remi.andruccioli@gmail.com
.RE
.PP
Describes all types and functions related to tasks\&. 
.PP
Definition in file \fBtask\&.h\fP\&.
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBTaskToSchedulerMessage\fP"

.PP
Represents a message that a \fBTask\fP can pass to the scheduler after its time slice has expired\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINO_MESSAGE \fP\fP
No message has to be passed to the scheduler\&. 
.TP
\fB\fIWAIT_ACTIVATION \fP\fP
Set the task to wait for its next activation\&. i\&.e\&. It finnished its work without consuming all of its completion time\&. 
.TP
\fB\fIWAIT_INTERRUPT \fP\fP
Set the task to wait for an interrupt\&. A parameter representing the interrupt number must accompany this message\&. 
.TP
\fB\fITERMINATE_TASK \fP\fP
Terminate the task\&. 
.TP
\fB\fIWAIT_MUTEX \fP\fP
Wait for a mutex to be unlocked\&. A parameter pointing to the mutex must accompany this message\&. 
.TP
\fB\fIWAIT_SOFTWARE_TIMER \fP\fP
Set the task to wait for the specified number of time resolution units, using the software timer\&. A parameter pointing to the specified number of units must accompany this message\&. 
.PP
Definition at line 29 of file task\&.h\&.
.SH "Function Documentation"
.PP 
.SS "void Task_Abort (void)"

.PP
Abort the calling task\&. This function can be called when some unrecoverable error occured in the context of a task (e\&.g\&. when a mandatory pointer is \fINULL\fP as a function parameter)\&. This will have the consequence of saving the task context (saving all registers and keeping the call stack) and unscheduling the task\&. 
.SH "Author"
.PP 
Generated automatically by Doxygen for Lazuli from the source code\&.
