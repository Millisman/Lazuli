.TH "src/include/Lazuli/sys/scheduler.h" 3 "Sun Sep 6 2020" "Lazuli" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/include/Lazuli/sys/scheduler.h \- Lazuli scheduler interface\&.  

.SH SYNOPSIS
.br
.PP
\fC#include <stdint\&.h>\fP
.br
\fC#include <Lazuli/common\&.h>\fP
.br
\fC#include <Lazuli/lazuli\&.h>\fP
.br
\fC#include <Lazuli/mutex\&.h>\fP
.br
\fC#include <Lazuli/sys/task\&.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBScheduler_Init\fP (void)"
.br
.RI "Initialize the scheduler prior to running it\&. "
.ti -1c
.RI "void \fBScheduler_AbortTask\fP (void *const sp)"
.br
.RI "Call the appropriate scheduler to abort the curent running task\&. "
.ti -1c
.RI "void \fBScheduler_HandleInterrupt\fP (const \fBuint8_t\fP interruptCode)"
.br
.RI "This function is called by arch-specific interrupt handling routine\&. "
.ti -1c
.RI "void \fBScheduler_HandleClockTick\fP (void *const sp)"
.br
.RI "This function is called when a clock tick occured, catch by the interrupt handler\&. "
.ti -1c
.RI "void \fBScheduler_WaitEvent\fP (void *const sp, const \fBuint8_t\fP eventCode)"
.br
.RI "This function is called from arch-specific Wait routine in order to get the current running task wait for a particular event, after saving its context\&. "
.ti -1c
.RI "void \fBScheduler_WakeupTasksWaitingMutex\fP (\fBLz_Mutex\fP *const mutex)"
.br
.RI "Wake up all tasks waiting for a mutex\&. "
.ti -1c
.RI "\fBTask\fP * \fBScheduler_GetCurrentTask\fP (void)"
.br
.RI "Get a pointer to the current running task\&. "
.ti -1c
.RI "void \fBScheduler_SleepUntilEndOfTimeSlice\fP (void)"
.br
.RI "Put the current task to sleep until the end of its time slice\&. "
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "void(*)(void) \fBReverseBytesOfFunctionPointer\fP (void(*const pointer)(void))"
.br
.RI "Reverse the bytes of a function pointer\&. "
.in -1c
.SH "Detailed Description"
.PP 
Lazuli scheduler interface\&. 

The kernel API of the scheduler\&. 
.PP
\fBCopyright:\fP
.RS 4
2017-2020, Remi Andruccioli remi.andruccioli@gmail.com
.RE
.PP
This file describes the kernel interface of the Lazuli scheduler\&. 
.PP
Definition in file \fBscheduler\&.h\fP\&.
.SH "Function Documentation"
.PP 
.SS "void Scheduler_Init (void)"

.PP
Initialize the scheduler prior to running it\&. This function is called by kernel initialization\&. 
.PP
Definition at line 613 of file scheduler\&.c\&.
.SS "void Scheduler_AbortTask (void *const sp)"

.PP
Call the appropriate scheduler to abort the curent running task\&. 
.PP
\fBParameters:\fP
.RS 4
\fIsp\fP The stack pointer of the running task after saving its context\&. 
.RE
.PP

.PP
Definition at line 632 of file scheduler\&.c\&.
.SS "void Scheduler_HandleInterrupt (const \fBuint8_t\fP interruptCode)"

.PP
This function is called by arch-specific interrupt handling routine\&. This function is executed in the context of the current running task, i\&.e\&. on its stack\&.
.PP
\fBParameters:\fP
.RS 4
\fIinterruptCode\fP The code of the interrupt being handled\&. 
.RE
.PP

.PP
Definition at line 657 of file scheduler\&.c\&.
.SS "void Scheduler_HandleClockTick (void *const sp)"

.PP
This function is called when a clock tick occured, catch by the interrupt handler\&. 
.PP
\fBParameters:\fP
.RS 4
\fIsp\fP The stack pointer of the current running task after saving its context\&. 
.RE
.PP

.PP
Definition at line 680 of file scheduler\&.c\&.
.SS "void Scheduler_WaitEvent (void *const sp, const \fBuint8_t\fP eventCode)"

.PP
This function is called from arch-specific Wait routine in order to get the current running task wait for a particular event, after saving its context\&. 
.PP
\fBParameters:\fP
.RS 4
\fIsp\fP The stack pointer of the current running task after saving its context\&. 
.br
\fIeventCode\fP The code of the event the task is waiting for\&. 
.RE
.PP

.SS "void Scheduler_WakeupTasksWaitingMutex (\fBLz_Mutex\fP *const mutex)"

.PP
Wake up all tasks waiting for a mutex\&. 
.PP
\fBParameters:\fP
.RS 4
\fImutex\fP A pointer to the mutex the tasks are waiting for\&. 
.RE
.PP

.PP
Definition at line 694 of file scheduler\&.c\&.
.SS "\fBTask\fP* Scheduler_GetCurrentTask (void)"

.PP
Get a pointer to the current running task\&. 
.PP
\fBReturns:\fP
.RS 4
A valid pointer to the current running task\&. 
.RE
.PP

.PP
Definition at line 720 of file scheduler\&.c\&.
.SH "Variable Documentation"
.PP 
.SS "void(*)(void) ReverseBytesOfFunctionPointer(void(*const pointer)(void))"

.PP
Reverse the bytes of a function pointer\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpointer\fP A function pointer\&.
.RE
.PP
\fBReturns:\fP
.RS 4
A new function pointer from reversed bytes of parameter \fCpointer\fP\&. 
.RE
.PP

.PP
Definition at line 35 of file scheduler\&.h\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Lazuli from the source code\&.
