.TH "src/libc-headers/arch-dependent/x86_64/stdint.h" 3 "Sun Sep 6 2020" "Lazuli" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/libc-headers/arch-dependent/x86_64/stdint.h \- Fixed width integer types for x86_64\&.  

.SH SYNOPSIS
.br
.PP
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBINT8_MIN\fP   ((\fBint8_t\fP)0x80)"
.br
.RI "Represents the minimum value of an object of type int8_t\&. "
.ti -1c
.RI "#define \fBINT16_MIN\fP   ((\fBint16_t\fP)0x8000)"
.br
.RI "Represents the minimum value of an object of type int16_t\&. "
.ti -1c
.RI "#define \fBINT32_MIN\fP   ((\fBint32_t\fP)0x80000000)"
.br
.RI "Represents the minimum value of an object of type int32_t\&. "
.ti -1c
.RI "#define \fBINT64_MIN\fP   ((\fBint64_t\fP)0x8000000000000000)"
.br
.RI "Represents the minimum value of an object of type int64_t\&. "
.ti -1c
.RI "#define \fBINT_FAST8_MIN\fP   \fBINT8_MIN\fP"
.br
.RI "Represents the minimum value of an object of type int_fast8_t\&. "
.ti -1c
.RI "#define \fBINT_FAST16_MIN\fP   \fBINT16_MIN\fP"
.br
.RI "Represents the minimum value of an object of type int_fast16_t\&. "
.ti -1c
.RI "#define \fBINT_FAST32_MIN\fP   \fBINT32_MIN\fP"
.br
.RI "Represents the minimum value of an object of type int_fast32_t\&. "
.ti -1c
.RI "#define \fBINT_FAST64_MIN\fP   \fBINT64_MIN\fP"
.br
.RI "Represents the minimum value of an object of type int_fast64_t\&. "
.ti -1c
.RI "#define \fBINT_LEAST8_MIN\fP   \fBINT8_MIN\fP"
.br
.RI "Represents the minimum value of an object of type int_least8_t\&. "
.ti -1c
.RI "#define \fBINT_LEAST16_MIN\fP   \fBINT16_MIN\fP"
.br
.RI "Represents the minimum value of an object of type int_least16_t\&. "
.ti -1c
.RI "#define \fBINT_LEAST32_MIN\fP   \fBINT32_MIN\fP"
.br
.RI "Represents the minimum value of an object of type int_least32_t\&. "
.ti -1c
.RI "#define \fBINT_LEAST64_MIN\fP   \fBINT64_MIN\fP"
.br
.RI "Represents the minimum value of an object of type int_least64_t\&. "
.ti -1c
.RI "#define \fBINTPTR_MIN\fP   \fBINT64_MIN\fP"
.br
.RI "Represents the minimum value of an object of type intptr_t\&. "
.ti -1c
.RI "#define \fBINT8_MAX\fP   ((\fBint8_t\fP)0x7f)"
.br
.RI "Represents the maximum value of an object of type int8_t\&. "
.ti -1c
.RI "#define \fBINT16_MAX\fP   ((\fBint16_t\fP)0x7fff)"
.br
.RI "Represents the maximum value of an object of type int16_t\&. "
.ti -1c
.RI "#define \fBINT32_MAX\fP   ((\fBint32_t\fP)0x7fffffff)"
.br
.RI "Represents the maximum value of an object of type int32_t\&. "
.ti -1c
.RI "#define \fBINT64_MAX\fP   ((\fBint64_t\fP)0x7fffffffffffffff)"
.br
.RI "Represents the maximum value of an object of type int64_t\&. "
.ti -1c
.RI "#define \fBINT_FAST8_MAX\fP   \fBINT8_MAX\fP"
.br
.RI "Represents the maximum value of an object of type int_fast8_t\&. "
.ti -1c
.RI "#define \fBINT_FAST16_MAX\fP   \fBINT16_MAX\fP"
.br
.RI "Represents the maximum value of an object of type int_fast16_t\&. "
.ti -1c
.RI "#define \fBINT_FAST32_MAX\fP   \fBINT32_MAX\fP"
.br
.RI "Represents the maximum value of an object of type int_fast32_t\&. "
.ti -1c
.RI "#define \fBINT_FAST64_MAX\fP   \fBINT64_MAX\fP"
.br
.RI "Represents the maximum value of an object of type int_fast64_t\&. "
.ti -1c
.RI "#define \fBINT_LEAST8_MAX\fP   \fBINT8_MAX\fP"
.br
.RI "Represents the maximum value of an object of type int_least8_t\&. "
.ti -1c
.RI "#define \fBINT_LEAST16_MAX\fP   \fBINT16_MAX\fP"
.br
.RI "Represents the maximum value of an object of type int_least16_t\&. "
.ti -1c
.RI "#define \fBINT_LEAST32_MAX\fP   \fBINT32_MAX\fP"
.br
.RI "Represents the maximum value of an object of type int_least32_t\&. "
.ti -1c
.RI "#define \fBINT_LEAST64_MAX\fP   \fBINT64_MAX\fP"
.br
.RI "Represents the maximum value of an object of type int_least64_t\&. "
.ti -1c
.RI "#define \fBINTPTR_MAX\fP   \fBINT64_MAX\fP"
.br
.RI "Represents the maximum value of an object of type intptr_t\&. "
.ti -1c
.RI "#define \fBUINT8_MAX\fP   ((\fBuint8_t\fP)0xff)"
.br
.RI "Represents the maximum value of an object of type uint8_t\&. "
.ti -1c
.RI "#define \fBUINT16_MAX\fP   ((\fBuint16_t\fP)0xffff)"
.br
.RI "Represents the maximum value of an object of type uint16_t\&. "
.ti -1c
.RI "#define \fBUINT32_MAX\fP   ((\fBuint32_t\fP)0xffffffff)"
.br
.RI "Represents the maximum value of an object of type uint32_t\&. "
.ti -1c
.RI "#define \fBUINT64_MAX\fP   ((\fBuint64_t\fP)0xffffffffffffffff)"
.br
.RI "Represents the maximum value of an object of type uint64_t\&. "
.ti -1c
.RI "#define \fBUINT_FAST8_MAX\fP   \fBUINT8_MAX\fP"
.br
.RI "Represents the maximum value of an object of type uint_fast8_t\&. "
.ti -1c
.RI "#define \fBUINT_FAST16_MAX\fP   \fBUINT16_MAX\fP"
.br
.RI "Represents the maximum value of an object of type uint_fast16_t\&. "
.ti -1c
.RI "#define \fBUINT_FAST32_MAX\fP   \fBUINT32_MAX\fP"
.br
.RI "Represents the maximum value of an object of type uint_fast32_t\&. "
.ti -1c
.RI "#define \fBUINT_FAST64_MAX\fP   \fBUINT64_MAX\fP"
.br
.RI "Represents the maximum value of an object of type uint_fast64_t\&. "
.ti -1c
.RI "#define \fBUINT_LEAST8_MAX\fP   \fBUINT8_MAX\fP"
.br
.RI "Represents the maximum value of an object of type uint_least8_t\&. "
.ti -1c
.RI "#define \fBUINT_LEAST16_MAX\fP   \fBUINT16_MAX\fP"
.br
.RI "Represents the maximum value of an object of type uint_least16_t\&. "
.ti -1c
.RI "#define \fBUINT_LEAST32_MAX\fP   \fBUINT32_MAX\fP"
.br
.RI "Represents the maximum value of an object of type uint_least32_t\&. "
.ti -1c
.RI "#define \fBUINT_LEAST64_MAX\fP   \fBUINT64_MAX\fP"
.br
.RI "Represents the maximum value of an object of type uint_least64_t\&. "
.ti -1c
.RI "#define \fBUINTPTR_MAX\fP   \fBUINT64_MAX\fP"
.br
.RI "Represents the maximum value of an object of type uinptr_t\&. "
.ti -1c
.RI "#define \fBUINTMAX_MAX\fP   \fBUINT64_MAX\fP"
.br
.RI "Represents the maximum value of an object of type uintmax_t\&. "
.ti -1c
.RI "#define \fBINT8_C\fP(X)   ((\fBint_least8_t\fP)(X))"
.br
.RI "Expands to an integer constant expression having the value specified by its argument and the type int_least8_t\&. "
.ti -1c
.RI "#define \fBINT16_C\fP(X)   ((\fBint_least16_t\fP)(X))"
.br
.RI "Expands to an integer constant expression having the value specified by its argument and the type int_least16_t\&. "
.ti -1c
.RI "#define \fBINT32_C\fP(X)   ((\fBint_least32_t\fP)(X))"
.br
.RI "Expands to an integer constant expression having the value specified by its argument and the type int_least32_t\&. "
.ti -1c
.RI "#define \fBINT64_C\fP(X)   ((\fBint_least64_t\fP)(X))"
.br
.RI "Expands to an integer constant expression having the value specified by its argument and the type int_least64_t\&. "
.ti -1c
.RI "#define \fBINTMAX_C\fP(X)   ((\fBintmax_t\fP)(X))"
.br
.RI "Expands to an integer constant expression having the value specified by its argument and the type intmax_t\&. "
.ti -1c
.RI "#define \fBUINT8_C\fP(X)   ((\fBuint_least8_t\fP)(X))"
.br
.RI "Expands to an integer constant expression having the value specified by its argument and the type uint_least8_t\&. "
.ti -1c
.RI "#define \fBUINT16_C\fP(X)   ((\fBuint_least16_t\fP)(X))"
.br
.RI "Expands to an integer constant expression having the value specified by its argument and the type uint_least16_t\&. "
.ti -1c
.RI "#define \fBUINT32_C\fP(X)   ((\fBuint_least32_t\fP)(X))"
.br
.RI "Expands to an integer constant expression having the value specified by its argument and the type uint_least32_t\&. "
.ti -1c
.RI "#define \fBUINT64_C\fP(X)   ((\fBuint_least64_t\fP)(X))"
.br
.RI "Expands to an integer constant expression having the value specified by its argument and the type uint_least64_t\&. "
.ti -1c
.RI "#define \fBUINTMAX_C\fP(X)   ((\fBuintmax_t\fP)(X))"
.br
.RI "Expands to an integer constant expression having the value specified by its argument and the type uintmax_t\&. "
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef char \fBint8_t\fP"
.br
.RI "Represents a signed integer type with width of exactly 8 bits\&. "
.ti -1c
.RI "typedef short \fBint16_t\fP"
.br
.RI "Represents a signed integer type with width of exactly 16 bits\&. "
.ti -1c
.RI "typedef int \fBint32_t\fP"
.br
.RI "Represents a signed integer type with width of exactly 32 bits\&. "
.ti -1c
.RI "typedef long \fBint64_t\fP"
.br
.RI "Represents a signed integer type with width of exactly 64 bits\&. "
.ti -1c
.RI "typedef char \fBint_fast8_t\fP"
.br
.RI "Represents the fastest signed integer type with width of at least 8 bits\&. "
.ti -1c
.RI "typedef short \fBint_fast16_t\fP"
.br
.RI "Represents the fastest signed integer type with width of at least 16 bits\&. "
.ti -1c
.RI "typedef int \fBint_fast32_t\fP"
.br
.RI "Represents the fastest signed integer type with width of at least 32 bits\&. "
.ti -1c
.RI "typedef long \fBint_fast64_t\fP"
.br
.RI "Represents the fastest signed integer type with width of at least 64 bits\&. "
.ti -1c
.RI "typedef unsigned char \fBint_least8_t\fP"
.br
.RI "Represents the smallest signed integer type with width of at least 8 bits\&. "
.ti -1c
.RI "typedef unsigned short \fBint_least16_t\fP"
.br
.RI "Represents the smallest signed integer type with width of at least 16 bits\&. "
.ti -1c
.RI "typedef unsigned int \fBint_least32_t\fP"
.br
.RI "Represents the smallest signed integer type with width of at least 32 bits\&. "
.ti -1c
.RI "typedef unsigned long \fBint_least64_t\fP"
.br
.RI "Represents the smallest signed integer type with width of at least 64 bits\&. "
.ti -1c
.RI "typedef \fBint64_t\fP \fBintmax_t\fP"
.br
.RI "Represents the maximum width integer type\&. "
.ti -1c
.RI "typedef \fBint64_t\fP \fBintptr_t\fP"
.br
.RI "Represents an integer capable of holding a pointer\&. "
.ti -1c
.RI "typedef unsigned char \fBuint8_t\fP"
.br
.RI "Represents a unsigned integer type with width of exactly 8 bits\&. "
.ti -1c
.RI "typedef unsigned short \fBuint16_t\fP"
.br
.RI "Represents a unsigned integer type with width of exactly 16 bits\&. "
.ti -1c
.RI "typedef unsigned int \fBuint32_t\fP"
.br
.RI "Represents a unsigned integer type with width of exactly 32 bits\&. "
.ti -1c
.RI "typedef unsigned long \fBuint64_t\fP"
.br
.RI "Represents a unsigned integer type with width of exactly 64 bits\&. "
.ti -1c
.RI "typedef unsigned char \fBuint_fast8_t\fP"
.br
.RI "Represents the fastest unsigned integer type with width of at least 8 bits\&. "
.ti -1c
.RI "typedef unsigned short \fBuint_fast16_t\fP"
.br
.RI "Represents the fastest unsigned integer type with width of at least 16 bits\&. "
.ti -1c
.RI "typedef unsigned int \fBuint_fast32_t\fP"
.br
.RI "Represents the fastest unsigned integer type with width of at least 32 bits\&. "
.ti -1c
.RI "typedef unsigned long \fBuint_fast64_t\fP"
.br
.RI "Represents the fastest unsigned integer type with width of at least 64 bits\&. "
.ti -1c
.RI "typedef unsigned char \fBuint_least8_t\fP"
.br
.RI "Represents the smallest unsigned integer type with width of at least 8 bits\&. "
.ti -1c
.RI "typedef unsigned short \fBuint_least16_t\fP"
.br
.RI "Represents the smallest unsigned integer type with width of at least 16 bits\&. "
.ti -1c
.RI "typedef unsigned int \fBuint_least32_t\fP"
.br
.RI "Represents the smallest unsigned integer type with width of at least 32 bits\&. "
.ti -1c
.RI "typedef unsigned long \fBuint_least64_t\fP"
.br
.RI "Represents the smallest unsigned integer type with width of at least 64 bits\&. "
.ti -1c
.RI "typedef \fBuint64_t\fP \fBuintmax_t\fP"
.br
.RI "Represents the maximum width unsigned integer type\&. "
.ti -1c
.RI "typedef \fBuint64_t\fP \fBuintptr_t\fP"
.br
.RI "Represents an unsigned integer capable of holding a pointer\&. "
.in -1c
.SH "Detailed Description"
.PP 
Fixed width integer types for x86_64\&. 


.PP
\fBCopyright:\fP
.RS 4
2018-2020, Remi Andruccioli remi.andruccioli@gmail.com
.RE
.PP
This file describes the implementation of the stdint\&.h standard header for defining fixed width integer types for the x86_64 architecture\&.
.PP
This implementation is architecture-dependent\&.
.PP
This implementation is based on : en\&.cppreference\&.com/w/c/types/integer pubs\&.opengroup\&.org/onlinepubs/9699919799/basedefs/stdint\&.h\&.html 
.PP
Definition in file \fBstdint\&.h\fP\&.
.SH "Typedef Documentation"
.PP 
.SS "typedef \fBint64_t\fP \fBintmax_t\fP"

.PP
Represents the maximum width integer type\&. Represents a signed integer type capable of representing any value of any signed integer type\&. 
.PP
Definition at line 90 of file stdint\&.h\&.
.SS "typedef \fBint64_t\fP \fBintptr_t\fP"

.PP
Represents an integer capable of holding a pointer\&. Represents a signed integer type with the property that any valid pointer to void can be converted to this type, then converted back to a pointer to void, and the result will compare equal to the original pointer\&. 
.PP
Definition at line 99 of file stdint\&.h\&.
.SS "typedef \fBuint64_t\fP \fBuintmax_t\fP"

.PP
Represents the maximum width unsigned integer type\&. Represents an unsigned integer type capable of representing any value of any unsigned integer type\&. 
.PP
Definition at line 167 of file stdint\&.h\&.
.SS "typedef \fBuint64_t\fP \fBuintptr_t\fP"

.PP
Represents an unsigned integer capable of holding a pointer\&. Represents an unsigned integer type with the property that any valid pointer to void can be converted to this type, then converted back to a pointer to void, and the result will compare equal to the original pointer\&. 
.PP
Definition at line 176 of file stdint\&.h\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Lazuli from the source code\&.
