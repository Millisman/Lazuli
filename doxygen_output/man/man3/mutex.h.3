.TH "src/include/Lazuli/mutex.h" 3 "Sun Sep 6 2020" "Lazuli" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/include/Lazuli/mutex.h \- Mutexes interface\&.  

.SH SYNOPSIS
.br
.PP
\fC#include <stdint\&.h>\fP
.br
\fC#include <Lazuli/common\&.h>\fP
.br
\fC#include <Lazuli/list\&.h>\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBLz_Mutex\fP"
.br
.RI "Represents a mutex\&. "
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBLZ_MUTEX_INIT\fP   { 0, \fBLINKED_LIST_INIT\fP }"
.br
.RI "Define the value to initialize a \fBLz_Mutex\fP in the unlocked state\&. "
.ti -1c
.RI "#define \fBLZ_MUTEX_INIT_LOCKED\fP   { 1, \fBLINKED_LIST_INIT\fP }"
.br
.RI "Define the value to initialize a \fBLz_Mutex\fP in the locked state\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBLz_Mutex_Init\fP (\fBLz_Mutex\fP *const mutex)"
.br
.RI "Initialize an already allocated \fBLz_Mutex\fP\&. "
.ti -1c
.RI "void \fBLz_Mutex_InitLocked\fP (\fBLz_Mutex\fP *const mutex)"
.br
.RI "Initialize an already allocated \fBLz_Mutex\fP\&. "
.ti -1c
.RI "void \fBLz_Mutex_Lock\fP (\fBLz_Mutex\fP *const mutex)"
.br
.RI "Lock the mutex and enter critical section\&. "
.ti -1c
.RI "void \fBLz_Mutex_Unlock\fP (\fBLz_Mutex\fP *const mutex)"
.br
.RI "Unlock the mutex and leave critical section\&. "
.in -1c
.SH "Detailed Description"
.PP 
Mutexes interface\&. 


.PP
\fBCopyright:\fP
.RS 4
2019-2020, Remi Andruccioli remi.andruccioli@gmail.com
.RE
.PP
Describes the interface for mutexes\&. Mutexes in Lazuli are implemented as blocking\&. 
.PP
Definition in file \fBmutex\&.h\fP\&.
.SH "Macro Definition Documentation"
.PP 
.SS "#define LZ_MUTEX_INIT   { 0, \fBLINKED_LIST_INIT\fP }"

.PP
Define the value to initialize a \fBLz_Mutex\fP in the unlocked state\&. This macro constant must be used to statically initialize a declared mutex\&. 
.PP
Definition at line 39 of file mutex\&.h\&.
.SS "#define LZ_MUTEX_INIT_LOCKED   { 1, \fBLINKED_LIST_INIT\fP }"

.PP
Define the value to initialize a \fBLz_Mutex\fP in the locked state\&. This macro constant must be used to statically initialize a declared mutex\&. 
.PP
Definition at line 47 of file mutex\&.h\&.
.SH "Function Documentation"
.PP 
.SS "void Lz_Mutex_Init (\fBLz_Mutex\fP *const mutex)"

.PP
Initialize an already allocated \fBLz_Mutex\fP\&. The mutex will be initialized in an unlocked state\&.
.PP
\fBParameters:\fP
.RS 4
\fImutex\fP A pointer to the \fBLz_Mutex\fP to initialize\&.
.RE
.PP
\fBNote:\fP
.RS 4
The calling task will abort if configuration macro LZ_CONFIG_CHECK_NULL_PARAMETERS_IN_MUTEXES is set to 1 and the parameter \fCmutex\fP is \fINULL\fP\&. 
.RE
.PP

.PP
Definition at line 61 of file mutex\&.c\&.
.SS "void Lz_Mutex_InitLocked (\fBLz_Mutex\fP *const mutex)"

.PP
Initialize an already allocated \fBLz_Mutex\fP\&. The mutex will be initialized in a locked state\&.
.PP
\fBParameters:\fP
.RS 4
\fImutex\fP A pointer to the \fBLz_Mutex\fP to initialize\&.
.RE
.PP
\fBNote:\fP
.RS 4
The calling task will abort if configuration macro LZ_CONFIG_CHECK_NULL_PARAMETERS_IN_MUTEXES is set to 1 and the parameter \fCmutex\fP is \fINULL\fP\&. 
.RE
.PP

.PP
Definition at line 69 of file mutex\&.c\&.
.SS "void Lz_Mutex_Lock (\fBLz_Mutex\fP *const mutex)"

.PP
Lock the mutex and enter critical section\&. 
.PP
\fBParameters:\fP
.RS 4
\fImutex\fP A pointer to the \fBLz_Mutex\fP to lock\&.
.RE
.PP
\fBNote:\fP
.RS 4
The calling task will abort if configuration macro LZ_CONFIG_CHECK_NULL_PARAMETERS_IN_MUTEXES is set to 1 and the parameter \fCmutex\fP is \fINULL\fP\&. 
.RE
.PP

.PP
Definition at line 77 of file mutex\&.c\&.
.SS "void Lz_Mutex_Unlock (\fBLz_Mutex\fP *const mutex)"

.PP
Unlock the mutex and leave critical section\&. 
.PP
\fBParameters:\fP
.RS 4
\fImutex\fP A pointer to the \fBLz_Mutex\fP to unlock\&.
.RE
.PP
\fBNote:\fP
.RS 4
The calling task will abort if configuration macro LZ_CONFIG_CHECK_NULL_PARAMETERS_IN_MUTEXES is set to 1 and the parameter \fCmutex\fP is \fINULL\fP\&. 
.RE
.PP

.PP
Definition at line 91 of file mutex\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Lazuli from the source code\&.
