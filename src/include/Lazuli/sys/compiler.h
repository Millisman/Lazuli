/**
 * @file src/include/Lazuli/sys/compiler.h
 * @brief Macro aliases on compiler facilities.
 * @date Feb 2017
 * @author Remi Andruccioli
 *
 * This file defines macros that can be used as aliases on compiler facilities
 * to add non-standard features to pure C89.
 * Ideally kernel code should work without these macros. These are just the
 * icing on the cake.
 */

#ifndef LAZULI_SYS_COMPILER_H
#define LAZULI_SYS_COMPILER_H

#ifdef __GNUC__

/*
 * The following macro functions definitions are an ugly hack to solve an ugly
 * compiler error: "section type conflict".
 *
 * TODO: Try a better way to solve this problem.
 */
/**
 * Turn a symbol into a string constant.
 *
 * @param X The symbol to turn into a string.
 */
#define COMPILER_H_STRINGIFY(X) #X

/**
 * Add a level of indirection to COMPILER_H_STRINGIFY() to force evaluation.
 *
 * @param X The symbol to turn into a string.
 */
#define COMPILER_H_TOSTRING(X) COMPILER_H_STRINGIFY(X)

/**
 * Generate a "unique" section name string that starts with ".progmem."
 * immediately followed by the line number.
 */
#define COMPILER_H_GENERATE_PROGMEM_SECTION_NAME() .progmem.__LINE__

/**
 * Indicates that a function never returns.
 */
#define NORETURN __attribute__((noreturn))

/*
 * We force the declaration of different ".progmem" sections by using all these
 * macro functions to eliminate the "section type conflict" error generated by
 * the compiler.
 * When linking, all these sections will be grouped into a unique ".progmem"
 * section.
 */
/**
 * Declare a variable to be stored in program memory.
 * i.e. usualy in ROM.
 */
#define PROGMEM                                                         \
  __attribute__                                                         \
  ((section(COMPILER_H_TOSTRING(COMPILER_H_GENERATE_PROGMEM_SECTION_NAME()))))

#else /* __GNUC__ */

#define NORETURN
#define PROGMEM

#endif/* __GNUC__ */

#endif /* LAZULI_SYS_COMPILER_H */
